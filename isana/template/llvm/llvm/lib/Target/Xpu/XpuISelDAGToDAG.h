//===-- {{ namespace }}ISelDAGToDAG.h - A Dag to Dag Inst Selector for {{ namespace }} -*- C++ -*-===//

#ifndef LLVM_LIB_TARGET_{{ namespace.upper() }}_{{ namespace.upper() }}ISELDAGTODAG_H
#define LLVM_LIB_TARGET_{{ namespace.upper() }}_{{ namespace.upper() }}ISELDAGTODAG_H

#include "{{ namespace }}.h"
#include "{{ namespace }}Subtarget.h"
#include "{{ namespace }}TargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// {{ namespace }}DAGToDAGISel - {{ namespace }} specific code to select {{ namespace }} machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace llvm {

class {{ namespace }}DAGToDAGISel : public SelectionDAGISel {
public:
  {{ namespace }}DAGToDAGISel() = delete;

  explicit {{ namespace }}DAGToDAGISel({{ namespace }}TargetMachine &TM, CodeGenOptLevel OL)
      : SelectionDAGISel(TM, OL), Subtarget(nullptr) {}

  bool runOnMachineFunction(MachineFunction &MF) override;

protected:
  /// Keep a pointer to the {{ namespace }}Subtarget around so that we can make the right
  /// decision when generating code for different targets.
  const {{ namespace }}Subtarget *Subtarget;

private:
  // Include the pieces autogenerated from the target description.
  #include "{{ namespace }}GenDAGISel.inc"

  void Select(SDNode *N) override;

  bool SelectAddrFrameIndex(SDValue Addr, SDValue &Base);
  bool SelectAddrFrameIndexRegImm(SDValue Addr, SDValue &Base, SDValue &Offset);
  bool SelectAddrGlobal(SDValue Addr, SDValue &Base);
  bool SelectAddrGlobalRegImm(SDValue Addr, SDValue &Base, SDValue &Offset);
  bool SelectAddrRegImm(SDValue Addr, SDValue &Base, SDValue &Offset);

  // virtual bool trySelect(SDNode *Node) = 0;

  // getImm - Return a target constant with the specified value.
  inline SDValue getImm(const SDNode *Node, uint64_t Imm) {
    return CurDAG->getTargetConstant(Imm, SDLoc(Node), Node->getValueType(0));
  }

  // virtual void processFunctionAfterISel(MachineFunction &MF) = 0;

  bool SelectInlineAsmMemoryOperand(const SDValue &Op,
                                    InlineAsm::ConstraintCode ConstraintID,
                                    std::vector<SDValue> &OutOps) override;
};

class {{ namespace }}DAGToDAGISelLegacy : public SelectionDAGISelLegacy {
public:
  static char ID;
  explicit {{ namespace }}DAGToDAGISelLegacy({{ namespace }}TargetMachine &TargetMachine,
                                       CodeGenOptLevel OptLevel);
};
}

#endif

